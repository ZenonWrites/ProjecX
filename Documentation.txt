    1. Created backend Django Project Projex.
    2. Create Project app.
    3. Creating Project models:
        Project Name & Domain: These are short pieces of text, so we'll use a CharField. This field requires a max_length argument.
        Description: This is for longer text, so a TextField is more appropriate.
        Start/Due Dates: For dates, Django has a DateTimeField.
        Status: This is a field with a limited number of options (e.g., 'To Do', 'In Progress'). We'll use a CharField with a special choices parameter to create a dropdown menu.

    4. Registered a Superuser.
    5. Registered Project model in django admin panel.
    6. Created ProjectSerializer:
       We create a class ProjectSerializer that inherits from serializers.ModelSerializer. (There is a serailizers.Serialzer for custom serializer but we will not use for now)
       A ModelSerializer is a shortcut that automatically builds a serializer based on a model.
       The inner Meta class tells the serializer which model to use (Project) and which fields to include ('__all__' means include everything).

   7. Created ProjectViewset:
       we've created a complete set of API endpoints.
       queryset: This specifies the data to be used—all objects from the Project model.
       serializer_class: This tells the viewset which serializer to use.

   8. Created Urls and included them in projex/urls.py
   9. Created a router to register our viewset.
   10. Customized the admin panel using Jazzmin.

   11. setup React.js
   12. modify this App.js component to fetch the list of projects from our Django API and display their names, I will use two special tools from React called Hooks.
        useState: This hook gives our component a "memory" or state. I'll use it to create a variable to store the list of projects once we get it from the API.
        useEffect: This hook lets us perform "side effects"—actions that happen outside the normal rendering of the component. Fetching data from an API is a perfect example of a side effect. We use useEffect to tell our component: "After you appear on the screen, go and fetch the project data."
    13. Added fecthing for Projects Api ai http://127.0.0.1:8000/api/projects/

    14. Encountered CORS (Cross-Origin Resource Sharing) error:
        The problem is that the React app is trying to make a request to the API on a different origin (http://127.0.0.1:8000) than the one the API is running on (http://localhost:3000).

    15. To fix this, installing corsheader package and setting up the middleware
    16. Its working now
    17. Creating React components for Project List for building complex UIs

    18. Now App.js will only :
        a. Fetch the data
        b. Send the data to ProjectList component

        The way we pass data from a parent component (App) to a child component (ProjectList) is through special attributes called props (short for properties).
    19. Used Props for Component ProjectList successfully
    20. Added Grids and Card to ProjectList component imported from Material UI
    21. Added Material UI theme to ProjectList component

    22. Added Material UI theme to ProjectList component
    23. Added Layout for the App component. Its only job is to render the sidebar, the header and then provide a man content area where other components can be displayed.
        The layout will use the following from Material UI:
        Box: A general-purpose container component. We'll use it as the main wrapper.

        Drawer: A component that slides in from the side, perfect for our navigation sidebar.

        AppBar: The component for the top header bar.

        Toolbar: A standard container for items inside the AppBar.

        List & ListItem: For creating the menu items inside our sidebar.

    24. Made new changes in the  Project Model and Layout as per figma design:
             CssBaseline and the backgroundColor on the main Box create the light gray background.

             The AppBar is now white (#fff) with black text (#000) and a subtle shadow (elevation={1}).

             I've added the TextField (Search), IconButton (Notifications), and Avatar to the Toolbar.

             The sidebar List now maps over our menuItems array to create each ListItemButton with its corresponding ListItemIcon.

             I've added active-state styling to the "Projects" button to make it blue, just like in the screenshot.

             A "Projects" title has been added to the main content area.

    25. Added ProjectForm component for creating new projects. it needs the following main things:
         Use MUI's Dialog component to look like a modal.

         Keep track of what the user types into each form field using the useState hook.

         Send the collected data to our Django API when the user clicks "Save" using a POST request.

    26. Added ProjectForm component for creating new projects.Added a search bar for filtering projects.

    27. There is one thing though, the button for creating "New Project" only exist at the Project page, in other pages such as "Change Request Page" it will be "New CR" and a modal for that will open and not for Project creation, To fix this, we need to introduce two key concepts:

        Routing: A system to show different "page" components (like ProjectPage, ChangeRequestPage) based on the URL. The standard for this is React Router.

        Prop Drilling: We'll make the Layout component "dumber." Instead of having its own button, it will accept a prop (let's call it headerAction) from the active page. This way, the ProjectPage can pass it the + New Project button, and a ChangeRequestPage can pass it a + New CR button.

    28. Modifying the Layout component to display the pageTitle and headerAction that are passed to it.

    29. Create a New ProjectPage Component
          This new component will be responsible for everything related to projects:

               Managing the + New Project button.

               Managing the modal's open/close state.

               Fetching the project list.

               Rendering the ProjectList and ProjectForm.

    30. The new Projectoage has encountered a few problems as seen in @Project page after using Browser router (will fix this error).png:
          The + New Project Button is Missing: This is because the Layout is no longer responsible for it. The ProjectPage component is supposed to create the button and pass it to the Layout as a prop (headerAction).

          Layout Styling: The Layout.js file should have code to make the AppBar (header) white and the main content area a light gray.

          Card Styling: The ProjectList.js file should be using MUI's Chip, LinearProgress, and Grid to create the detailed card layout from our target.

          a. Fix the Missing Button
                The ProjectPage.js file needs to create the button and pass it to the Layout. It seems the headerAction prop is not being passed correctly.