    1. Created backend Django Project Projex.
    2. Create Project app.
    3. Creating Project models:
        Project Name & Domain: These are short pieces of text, so we'll use a CharField. This field requires a max_length argument.
        Description: This is for longer text, so a TextField is more appropriate.
        Start/Due Dates: For dates, Django has a DateTimeField.
        Status: This is a field with a limited number of options (e.g., 'To Do', 'In Progress'). We'll use a CharField with a special choices parameter to create a dropdown menu.

    4. Registered a Superuser.
    5. Registered Project model in django admin panel.
    6. Created ProjectSerializer:
       We create a class ProjectSerializer that inherits from serializers.ModelSerializer. (There is a serailizers.Serialzer for custom serializer but we will not use for now)
       A ModelSerializer is a shortcut that automatically builds a serializer based on a model.
       The inner Meta class tells the serializer which model to use (Project) and which fields to include ('__all__' means include everything).

   7. Created ProjectViewset:
       we've created a complete set of API endpoints.
       queryset: This specifies the data to be used—all objects from the Project model.
       serializer_class: This tells the viewset which serializer to use.

   8. Created Urls and included them in projex/urls.py
   9. Created a router to register our viewset.
   10. Customized the admin panel using Jazzmin.

   11. setup React.js
   12. modify this App.js component to fetch the list of projects from our Django API and display their names, I will use two special tools from React called Hooks.
        useState: This hook gives our component a "memory" or state. I'll use it to create a variable to store the list of projects once we get it from the API.
        useEffect: This hook lets us perform "side effects"—actions that happen outside the normal rendering of the component. Fetching data from an API is a perfect example of a side effect. We use useEffect to tell our component: "After you appear on the screen, go and fetch the project data."
    13. Added fecthing for Projects Api ai http://127.0.0.1:8000/api/projects/

    14. Encountered CORS (Cross-Origin Resource Sharing) error:
        The problem is that the React app is trying to make a request to the API on a different origin (http://127.0.0.1:8000) than the one the API is running on (http://localhost:3000).

    15. To fix this, installing corsheader package and setting up the middleware
    16. Its working now
    17. Creating React components for Project List for building complex UIs

    18. Now App.js will only :
        a. Fetch the data
        b. Send the data to ProjectList component

        The way we pass data from a parent component (App) to a child component (ProjectList) is through special attributes called props (short for properties).
    19. Used Props for Component ProjectList successfully
    20. Added Grids and Card to ProjectList component imported from Material UI
    21. Added Material UI theme to ProjectList component